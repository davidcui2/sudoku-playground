{"version":3,"sources":["features/sudoku/Sudoku.module.css","features/sudoku/sudokuSlice.ts","features/sudoku/SudokuSetupPanel.tsx","features/sudoku/Sudoku.tsx","features/hooks/useKeyPress.ts","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","sudokuConstraintTypes","nineByNineEmpty","Array","fill","undefined","newInitialCellData","map","_1","_2","possible","from","keys","pencilMarks","confirmed","predefined","split","forEach","r","rowIndex","columnIndex","length","c","charAt","Number","parseInt","initialState","rowCount","columnCount","cellData","constraints","default9x9Constraint","invalidCells","sudokuSlice","createSlice","name","reducers","initializeBoard","state","action","payload","row","column","rowConstraints","rIndex","cells","_","cIndex","type","columnConstraints","setPencilMark","number","Set","add","clearPencilMark","setFinalNumber","clearFinalNumber","setPredefined","clearPredefined","validateConstraint","invalidSet","constraint","i","j","firstValue","secondValue","clearInvalidCells","importConstraints","JSON","parse","addConstrainst","push","actions","sudoku","SudokuSetupPanel","props","dispatch","useDispatch","useSelector","cst","useState","newRow","setNewRow","newColumn","setNewColumn","constraintsString","setConstraintsString","constraintValid","setConstraintValid","newConstraintType","setNewConstraintType","textAreaRef","useRef","useEffect","newConstraints","console","dir","isArray","every","includes","e","className","styles","textbox","aria-label","value","onChange","target","button","onClick","cn","textArea","invalidCell","rows","ref","stringify","log","current","select","document","execCommand","selectedCells","t","key","Sudoku","downHandler","data","invalid","selectedIndexes","setSelectedIndexes","isSetPencilMark","setIsSetPencilMark","adminMode","setAdminMode","togglePencilMark","x","validateConstraintAction","clearSelection","keyCode","ctrlKey","toLowerCase","a","selectedIndex","window","addEventListener","removeEventListener","style","color","gridRow","cell","boldCellLeft","boldCellRight","boldCellTop","boldCellBottom","selectedCell","some","event","metaKey","shiftKey","lastSelected","rowFrom","Math","min","rowTo","max","columnFrom","columnTo","existingSet","cellOnClick","slice","sort","join","predefinedCell","App","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","sudokuReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbbd9d95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Sudoku_row__3XpHE\",\"gridRow\":\"Sudoku_gridRow__Df9Ap\",\"cell\":\"Sudoku_cell__SGUHs\",\"pencilMarks\":\"Sudoku_pencilMarks__3H5pR\",\"selectedCell\":\"Sudoku_selectedCell__1VVDn\",\"predefinedCell\":\"Sudoku_predefinedCell__2EFLm\",\"invalidCell\":\"Sudoku_invalidCell__2RgwF\",\"boldCellLeft\":\"Sudoku_boldCellLeft__1VSTK\",\"boldCellTop\":\"Sudoku_boldCellTop__3FvA0\",\"boldCellRight\":\"Sudoku_boldCellRight__1DpI3\",\"boldCellBottom\":\"Sudoku_boldCellBottom__1za-O\",\"textbox\":\"Sudoku_textbox__YNx7y\",\"button\":\"Sudoku_button__t_AOF\",\"textArea\":\"Sudoku_textArea__2rlg6\"};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport default9x9Constraint from \"./classis9x9defaultConstraints.json\";\n\ninterface CellData {\n  confirmed?: number;\n  pencilMarks: number[];\n  possible: number[];\n  predefined: boolean;\n}\n\nexport interface CellIndex {\n  row: number;\n  column: number;\n}\n\nexport const sudokuConstraintTypes = [\n  \"distinct\",\n  \"equality\", // unsupported\n  \"inequality\", // unsupported\n  \"sumTo\", // unsupported\n] as const;\nexport type SudokuConstraintType = typeof sudokuConstraintTypes[number];\n\ninterface SudokuConstraint {\n  cells: Array<CellIndex>;\n  type: SudokuConstraintType;\n}\n\ninterface SudokuState {\n  rowCount: number;\n  columnCount: number;\n\n  cellData: Array<Array<CellData>>;\n\n  constraints: Array<SudokuConstraint>;\n  invalidCells: Array<CellIndex>;\n}\n\nconst nineByNineEmpty = new Array(9).fill(undefined);\n\nconst newInitialCellData: Array<Array<CellData>> = nineByNineEmpty.map((_1) =>\n  nineByNineEmpty.map((_2) => ({\n    possible: Array.from(Array(9).keys()),\n    pencilMarks: [],\n    confirmed: undefined,\n    predefined: false,\n  }))\n);\n\nconst seed1 =\n  \"5-482--69;---7-9-1-;---546---;2-695--3-;1396-42--;7---129--;62-4-----;9--2--473;--3-97--2;\";\n\nseed1.split(\";\").forEach((r, rowIndex) => {\n  for (let columnIndex = 0; columnIndex < r.length; columnIndex++) {\n    const c = r.charAt(columnIndex);\n    if (c !== \"-\") {\n      newInitialCellData[rowIndex][columnIndex].confirmed = Number.parseInt(c);\n      newInitialCellData[rowIndex][columnIndex].predefined = true;\n    }\n  }\n});\n\nconst initialState: SudokuState = {\n  rowCount: 0,\n  columnCount: 0,\n  cellData: newInitialCellData,\n  constraints: default9x9Constraint as Array<SudokuConstraint>,\n  invalidCells: [],\n};\n\nexport const sudokuSlice = createSlice({\n  name: \"sudoku\",\n  initialState,\n  reducers: {\n    initializeBoard: (\n      state,\n      action: PayloadAction<{ row: number; column: number }>\n    ) => {\n      const { row, column } = action.payload;\n      state.rowCount = row;\n      state.columnCount = column;\n\n      const cellData: Array<Array<CellData>> = Array(row).fill(\n        Array(column).fill({\n          possible: Array.from(Array(column).keys()),\n          pencilMarks: [],\n        })\n      );\n      state.cellData = cellData;\n\n      const rowConstraints: Array<SudokuConstraint> = cellData.map(\n        (r, rIndex) => ({\n          cells: r.map((_, cIndex) => ({ row: rIndex, column: cIndex })),\n          type: \"distinct\",\n        })\n      );\n\n      const columnConstraints: Array<SudokuConstraint> = cellData.map(\n        (r, rIndex) => ({\n          cells: r.map((_, cIndex) => ({ column: rIndex, row: cIndex })),\n          type: \"distinct\",\n        })\n      );\n\n      state.constraints = [...rowConstraints, ...columnConstraints];\n    },\n    setPencilMark: (\n      state,\n      action: PayloadAction<{ row: number; column: number; number: number }>\n    ) => {\n      const { row, column, number } = action.payload;\n\n      if (state.cellData[row][column].predefined) {\n        return;\n      }\n      state.cellData = state.cellData.map((r, rIndex) =>\n        r.map((c, cIndex) => {\n          if (rIndex === row && cIndex === column) {\n            return {\n              ...c,\n              pencilMarks: Array.from(new Set(c.pencilMarks).add(number)),\n            };\n          } else {\n            return c;\n          }\n        })\n      );\n    },\n    clearPencilMark: (\n      state,\n      action: PayloadAction<{ row: number; column: number }>\n    ) => {\n      const { row, column } = action.payload;\n\n      state.cellData = state.cellData.map((r, rIndex) =>\n        r.map((c, cIndex) => {\n          if (rIndex === row && cIndex === column) {\n            return {\n              ...c,\n              pencilMarks: [],\n            };\n          } else {\n            return c;\n          }\n        })\n      );\n    },\n    setFinalNumber: (\n      state,\n      action: PayloadAction<{ row: number; column: number; number: number }>\n    ) => {\n      const { row, column, number } = action.payload;\n\n      if (state.cellData[row][column].predefined) {\n        return;\n      }\n\n      state.cellData = state.cellData.map((r, rIndex) =>\n        r.map((c, cIndex) => {\n          if (rIndex === row && cIndex === column) {\n            return {\n              ...c,\n              confirmed: number,\n            };\n          } else {\n            return c;\n          }\n        })\n      );\n    },\n    clearFinalNumber: (\n      state,\n      action: PayloadAction<{ row: number; column: number }>\n    ) => {\n      const { row, column } = action.payload;\n\n      if (state.cellData[row][column].predefined) {\n        return;\n      }\n\n      state.cellData = state.cellData.map((r, rIndex) =>\n        r.map((c, cIndex) => {\n          if (rIndex === row && cIndex === column) {\n            return {\n              ...c,\n              confirmed: undefined,\n            };\n          } else {\n            return c;\n          }\n        })\n      );\n    },\n    setPredefined: (\n      state,\n      action: PayloadAction<{\n        row: number;\n        column: number;\n        number: number;\n        predefined?: boolean;\n      }>\n    ) => {\n      const { row, column, number, predefined = false } = action.payload;\n\n      state.cellData = state.cellData.map((r, rIndex) =>\n        r.map((c, cIndex) => {\n          if (rIndex === row && cIndex === column) {\n            return {\n              ...c,\n              confirmed: number,\n              pencilMarks: [],\n              predefined: predefined,\n            };\n          } else {\n            return c;\n          }\n        })\n      );\n    },\n    clearPredefined: (\n      state,\n      action: PayloadAction<{ row: number; column: number }>\n    ) => {\n      const { row, column } = action.payload;\n\n      state.cellData = state.cellData.map((r, rIndex) =>\n        r.map((c, cIndex) => {\n          if (rIndex === row && cIndex === column) {\n            return {\n              ...c,\n              confirmed: undefined,\n              predefined: false,\n            };\n          } else {\n            return c;\n          }\n        })\n      );\n    },\n    validateConstraint: (state) => {\n      const invalidSet = new Set<CellIndex>();\n\n      state.constraints.forEach((constraint) => {\n        switch (constraint.type) {\n          case \"distinct\":\n            for (let i = 0; i < constraint.cells.length; i++) {\n              for (let j = i + 1; j < constraint.cells.length; j++) {\n                const firstValue =\n                  state.cellData[constraint.cells[i].row][\n                    constraint.cells[i].column\n                  ].confirmed;\n                const secondValue =\n                  state.cellData[constraint.cells[j].row][\n                    constraint.cells[j].column\n                  ].confirmed;\n                if (firstValue && firstValue === secondValue) {\n                  invalidSet.add(constraint.cells[i]);\n                  invalidSet.add(constraint.cells[j]);\n                }\n              }\n            }\n        }\n      });\n\n      state.invalidCells = Array.from(invalidSet);\n    },\n    clearInvalidCells: (state) => {\n      state.invalidCells = [];\n    },\n    // exportConstraint: (state) => {\n    //   console.dir(JSON.stringify(state.constraints));\n    // },\n    importConstraints: (state, action: PayloadAction<string>) => {\n      state.constraints = JSON.parse(action.payload);\n    },\n    addConstrainst: (state, action: PayloadAction<SudokuConstraint>) => {\n      state.constraints.push(action.payload);\n    },\n  },\n});\n\nexport const {\n  initializeBoard,\n  setPencilMark,\n  clearPencilMark,\n  setFinalNumber,\n  clearFinalNumber,\n  validateConstraint,\n  clearInvalidCells,\n  // exportConstraint,\n  importConstraints,\n  addConstrainst,\n  setPredefined,\n  clearPredefined,\n} = sudokuSlice.actions;\n\nexport const rowCount = (state: RootState) => state.sudoku.rowCount;\nexport const columnCount = (state: RootState) => state.sudoku.columnCount;\nexport const cellData = (state: RootState) => state.sudoku.cellData;\nexport const invalidCells = (state: RootState) => state.sudoku.invalidCells;\nexport const constraints = (state: RootState) => state.sudoku.constraints;\n\nexport default sudokuSlice.reducer;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport cn from \"classnames\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  initializeBoard,\n  constraints as cst,\n  importConstraints,\n  sudokuConstraintTypes,\n  CellIndex,\n  SudokuConstraintType,\n  addConstrainst,\n} from \"./sudokuSlice\";\n\nimport styles from \"./Sudoku.module.css\";\n\ninterface SudokuSetupPanelProps {\n  selectedCells: Array<CellIndex>;\n}\n\nexport function SudokuSetupPanel(props: SudokuSetupPanelProps) {\n  const dispatch = useDispatch();\n  const constraints = useSelector(cst);\n\n  const [newRow, setNewRow] = useState(9);\n  const [newColumn, setNewColumn] = useState(9);\n  const [constraintsString, setConstraintsString] = useState(\"\");\n  const [constraintValid, setConstraintValid] = useState(true);\n\n  const [newConstraintType, setNewConstraintType] = useState<\n    SudokuConstraintType\n  >(\"distinct\");\n\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\n\n  useEffect(() => {\n    try {\n      const newConstraints = JSON.parse(constraintsString);\n      console.dir(newConstraints);\n      if (\n        Array.isArray(newConstraints) &&\n        newConstraints.every((c) => sudokuConstraintTypes.includes(c.type))\n      ) {\n        setConstraintValid(true);\n      } else {\n        setConstraintValid(false);\n      }\n    } catch (e) {\n      //   console.error(e);\n      setConstraintValid(false);\n    }\n  }, [constraintsString]);\n\n  function exportConstraint() {\n    setConstraintsString(JSON.stringify(constraints));\n  }\n\n  function copyConstraint() {\n    console.log(constraintsString);\n    if (textAreaRef.current) {\n      textAreaRef.current.select();\n      document.execCommand(\"copy\");\n    }\n  }\n\n  function importString() {\n    if (constraintValid) {\n      return;\n    }\n    dispatch(importConstraints(constraintsString));\n  }\n\n  return (\n    <>\n      <div className={styles.row}>\n        <h2>Set up panel</h2>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set row number\"\n          value={newRow}\n          onChange={(e) => setNewRow(Number.parseInt(e.target.value))}\n          type=\"number\"\n        />\n        <input\n          className={styles.textbox}\n          aria-label=\"Set column number\"\n          value={newColumn}\n          onChange={(e) => setNewColumn(Number.parseInt(e.target.value))}\n          type=\"number\"\n        />\n        <button\n          className={styles.button}\n          onClick={() =>\n            dispatch(initializeBoard({ row: newRow, column: newColumn }))\n          }\n        >\n          Initialize\n        </button>\n      </div>\n      <div className={styles.row}>\n        <textarea\n          className={cn(styles.textArea, {\n            [styles.invalidCell]: !constraintValid,\n          })}\n          value={constraintsString}\n          onChange={(e) => setConstraintsString(e.target.value)}\n          rows={5}\n          ref={textAreaRef}\n        />\n      </div>\n      <div className={styles.row}>\n        <button className={styles.button} onClick={() => exportConstraint()}>\n          Export\n        </button>\n        <button className={styles.button} onClick={() => copyConstraint()}>\n          Copy\n        </button>\n        <button className={styles.button} onClick={() => importString()}>\n          Import\n        </button>\n      </div>\n      <div className={styles.row}>\n        <p>{props.selectedCells.length} selected cell(s)</p>\n      </div>\n      <div className={styles.row}>\n        <p>New constraint type - </p>\n        <select\n          value={newConstraintType}\n          onChange={(e) => {\n            setNewConstraintType(e.target.value as SudokuConstraintType);\n          }}\n        >\n          {sudokuConstraintTypes.map((t) => (\n            <option key={t}>{t}</option>\n          ))}\n        </select>\n      </div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          onClick={() =>\n            dispatch(\n              addConstrainst({\n                cells: props.selectedCells,\n                type: newConstraintType,\n              })\n            )\n          }\n        >\n          Add new constraint\n        </button>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  // rowCount,\n  // columnCount,\n  cellData,\n  setPencilMark,\n  clearPencilMark,\n  setFinalNumber,\n  clearFinalNumber,\n  validateConstraint as validateConstraintAction,\n  invalidCells,\n  CellIndex,\n  clearInvalidCells,\n} from \"./sudokuSlice\";\nimport { useKeyDown } from \"../hooks/useKeyPress\";\n\nimport styles from \"./Sudoku.module.css\";\nimport { SudokuSetupPanel } from \"./SudokuSetupPanel\";\n\nexport function Sudoku() {\n  // const row = useSelector(rowCount);\n  // const column = useSelector(columnCount);\n  const data = useSelector(cellData);\n  const invalid = useSelector(invalidCells);\n\n  const dispatch = useDispatch();\n\n  const [selectedIndexes, setSelectedIndexes] = useState<Array<CellIndex>>([]);\n\n  const [isSetPencilMark, setIsSetPencilMark] = useState(false);\n  const [adminMode, setAdminMode] = useState(false);\n\n  // // Initialize the board on load\n  // useEffect(() => {\n  //   dispatch(setPredefined({ row: 4, column: 5, predefined: true, number: 3 }));\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, []);\n\n  const togglePencilMark = () => setIsSetPencilMark((x) => !x);\n  const validateConstraint = () => dispatch(validateConstraintAction());\n  const clearSelection = () => {\n    setSelectedIndexes([]);\n    dispatch(clearInvalidCells());\n  };\n\n  useKeyDown(({ key, keyCode, ctrlKey }) => {\n    // Temporarily only support one select cell\n    // if (selectedIndexes.length === 1) {\n    // console.log(\n    //   \"keyDown\",\n    //   key,\n    //   \"cell\",\n    //   selectedIndexes.row,\n    //   selectedIndexes.column\n    // );\n\n    if (key.toLowerCase() === \"t\") {\n      togglePencilMark();\n      return;\n    } else if (key.toLowerCase() === \"v\") {\n      validateConstraint();\n      return;\n    } else if (key.toLowerCase() === \"c\") {\n      clearSelection();\n      return;\n    } else if (ctrlKey && key.toLowerCase() === \"a\") {\n      setAdminMode((a) => !a);\n      return;\n    }\n\n    for (const selectedIndex of selectedIndexes) {\n      if (keyCode > 48 && keyCode < 58) {\n        dispatch(\n          isSetPencilMark\n            ? setPencilMark({\n                row: selectedIndex.row,\n                column: selectedIndex.column,\n                number: +key,\n              })\n            : setFinalNumber({\n                row: selectedIndex.row,\n                column: selectedIndex.column,\n                number: +key,\n              })\n        );\n      } else if (key === \"Backspace\" || key === \"Delete\") {\n        dispatch(\n          isSetPencilMark\n            ? clearPencilMark({\n                row: selectedIndex.row,\n                column: selectedIndex.column,\n              })\n            : clearFinalNumber({\n                row: selectedIndex.row,\n                column: selectedIndex.column,\n              })\n        );\n      }\n    }\n    // } else if (selectedIndexes.length > 1) {\n    //   console.warn(\"Keydown on multiple selected cell is not supported (yet).\");\n    // }\n  });\n\n  function cellOnClick(\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    rowIndex: number,\n    columnIndex: number\n  ) {\n    // Command, Ctrl keys\n    if (event.metaKey || event.ctrlKey) {\n      setSelectedIndexes(\n        Array.from(\n          new Set(selectedIndexes).add({ row: rowIndex, column: columnIndex })\n        )\n      );\n    } else if (event.shiftKey) {\n      if (selectedIndexes.length === 0) {\n        setSelectedIndexes([{ row: rowIndex, column: columnIndex }]);\n      } else {\n        // Approximate last one\n        const lastSelected = selectedIndexes[selectedIndexes.length - 1];\n        const rowFrom = Math.min(rowIndex, lastSelected.row);\n        const rowTo = Math.max(rowIndex, lastSelected.row);\n        const columnFrom = Math.min(columnIndex, lastSelected.column);\n        const columnTo = Math.max(columnIndex, lastSelected.column);\n\n        const existingSet = new Set(selectedIndexes);\n\n        for (let i = rowFrom; i <= rowTo; i++) {\n          for (let j = columnFrom; j <= columnTo; j++) {\n            existingSet.add({ row: i, column: j });\n          }\n        }\n\n        setSelectedIndexes(Array.from(existingSet));\n      }\n    } else {\n      // Remove selection if selecting the one and only one\n      if (\n        selectedIndexes.length === 1 &&\n        selectedIndexes[0].column === columnIndex &&\n        selectedIndexes[0].row === rowIndex\n      ) {\n        setSelectedIndexes([]);\n      }\n      // Set a new selected index\n      else {\n        setSelectedIndexes([{ row: rowIndex, column: columnIndex }]);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button className={styles.button} onClick={togglePencilMark}>\n          {isSetPencilMark ? \"Entering Pencil Mark (T)\" : \"Entering Answer (T)\"}\n        </button>\n        <button className={styles.button} onClick={validateConstraint}>\n          Validate (V)\n        </button>\n        <button className={styles.button} onClick={clearSelection}>\n          Clear selection (C)\n        </button>\n      </div>\n      {adminMode && (\n        <div className={styles.row}>\n          <p style={{ color: \"red\" }}>Admin mode</p>\n        </div>\n      )}\n      {data.map((r, rowIndex) => (\n        <div className={styles.gridRow} key={`row${rowIndex}`}>\n          {r.map((c, columnIndex) => (\n            <div\n              className={cn(styles.cell, {\n                [styles.boldCellLeft]: columnIndex % 3 === 0,\n                [styles.boldCellRight]: columnIndex % 3 === 2,\n                [styles.boldCellTop]: rowIndex % 3 === 0,\n                [styles.boldCellBottom]: rowIndex % 3 === 2,\n                [styles.selectedCell]: selectedIndexes.some(\n                  (i) => i.row === rowIndex && i.column === columnIndex\n                ),\n                [styles.invalidCell]: invalid.some(\n                  (x) => rowIndex === x.row && columnIndex === x.column\n                ),\n              })}\n              onClick={(e) => cellOnClick(e, rowIndex, columnIndex)}\n              key={`c${columnIndex}r${rowIndex}`}\n            >\n              <div className={styles.pencilMarks}>\n                {c.pencilMarks.slice().sort().join(\" \")}\n              </div>\n              <div\n                className={cn({\n                  [styles.predefinedCell]: c.predefined,\n                })}\n              >\n                {c.confirmed}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n      {adminMode && <SudokuSetupPanel selectedCells={selectedIndexes} />}\n    </div>\n  );\n}\n","import { useState, useEffect, KeyboardEvent, KeyboardEventHandler } from \"react\";\n\n\nexport function useKeyPress(targetKey: string) {\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState(false);\n\n    // If pressed key is our target key then set to true\n    function downHandler({ key }: KeyboardEvent) {\n        if (key === targetKey) {\n            setKeyPressed(true);\n        }\n    }\n\n    // If released key is our target key then set to false\n    function upHandler({ key }: KeyboardEvent) {\n        if (key === targetKey) {\n            setKeyPressed(false);\n        }\n    };\n\n    // Add event listeners\n    useEffect(() => {\n        window.addEventListener('keydown', downHandler as any);\n        window.addEventListener('keyup', upHandler as any);\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener('keydown', downHandler as any);\n            window.removeEventListener('keyup', upHandler as any);\n        };\n    }); // Empty array ensures that effect is only run on mount and unmount\n\n    return keyPressed;\n}\n\nexport function useKeyDown(downHandler: KeyboardEventHandler) {\n\n    // Add event listeners\n    useEffect(() => {\n        window.addEventListener('keydown', downHandler as any);\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener('keydown', downHandler as any);\n        };\n    }); // Empty array ensures that effect is only run on mount and unmount\n}","import React from \"react\";\r\n// import logo from \"./logo.svg\";\r\n// import { Counter } from \"./features/counter/Counter\";\r\nimport { Sudoku } from \"./features/sudoku/Sudoku\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Sudoku />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"../features/counter/counterSlice\";\r\nimport sudokuReducer from \"../features/sudoku/sudokuSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    sudoku: sudokuReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}